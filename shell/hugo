
# hb(): build hugo site into mudox.github.io
hb() {
  local production='output/production'

  local site_git_path="${HOME}/Git/Mudox.github.io"
  if [ ! -e "${site_git_path}" ]; then
    echo "\e[31mneed ${site_git_path}, quit ...\e[0m"
    return
  fi

  if [ ! -d "${site_git_path}" ]; then
    echo "\e[31mmissing ${site_git_path}, quit ...\e[0m"
    return
  fi

  # check if $(pwd) is a valid root of a hugo site.
  if ! [ -d "content" -a -f "config.toml" ]; then
    echo "\e[33mcurrent path is not a valid root of hugo site\e[0m"
    local default_site="${HOME}/Sites/hugo-site"
    if [ -d "${default_site}" ]; then
      echo "\e[34mcd to \e[7;34m${default_site} ...\e[0m"
      cd "${default_site}"
    else
      echo "\e[31mcan not find a valid hugo site path to cd, quit ...\e[0m"
      return
    fi
  fi

  echo "\e[34mstart building site ...\e[0m"
  # start hugo server
  hugo                            \
    --source=.                    \
    --destination="${production}" \
    --buildDrafts                 \
    --buildFuture                 \
    --disableRSS=true             \
    --disableSitemap=true         \
    --theme="cur_theme"

  if [ "$?" -ne 0 ]; then
    echo "\e[31mbuild site failed, quit ...\e[0m"
    return
  fi

  echo "\e[34mcopying production ...\e[0m"
  cp --recursive --target-directory="${site_git_path}" "./${production}"/* || return

  # commit & push changes to github
  cd "${site_git_path}"
  if [ "$#" -ne 1 ]; then
    git add . && git commit
  else
    git add . && git commit -m "$1"
  fi

  echo "\e[34mpushing up ...\e[0m"
  git push
}

# hs(): hugo server for test {{{1
hs() {
  # kill running hugo if any.
  kill %hugo &>/dev/null

  # sleep a while for old hugo instance to die if any.
  if [[ "$?" -eq 0 ]]; then
    local sleep_interval=2
    local steps=10
    for (( i = 0; i < steps; i++ )); do
      sleep 0.1
      printf "\r\e[3$((i % 8 + 1))msleeping ... 0.%02d seconds left" $((sleep_interval * 10 - i))
    done
    unset i
    echo "\e[0m"
  fi

  # choose theme
  if [[ "$#" -le 1 ]]; then
    local theme=${1:-"cur_theme"}
  else
    echo "usage: $0 [theme_name]"
    return
  fi

  # check if $(pwd) is a valid root of a hugo site.
  if ! [ -d "content" -a -f "config.toml" ]; then
    echo "\e[33mcurrent path is not a valid root of hugo site\e[0m"
    local default_site="${HOME}/Sites/hugo-site"
    if [ -d "${default_site}" ]; then
      echo "\e[34mcd to \e[5;33m${default_site}\e[33m ...\e[0m"
      cd "${default_site}"
    else
      echo "\e[31mcan not find a valid hugo site path to cd\e[0m"
      return
    fi
  fi

  # start hugo server
  hugo server                         \
    --watch                           \
    --buildDrafts                     \
    --buildFuture                     \
    --theme="$theme"                  \
    --destination="output/production" \
    --source=. &

  # open local pages in browser
  local url='http://localhost:1313'
  sleep 2

  case $(uname -s) in
    Darwin )
      open "${url}"
      ;;
    CYGWIN* )
      firefox_dev='/d/Program Files/Firefox Developer Edition/firefox.exe'
      firefox='/d/Program Files/Mozilla Firefox/firefox.exe'
      if [ -e "${firefox_dev}" -a -e "${firefox}" ]; then
	select browser in "${firefox_dev}" "${firefox}"; do
	  echo "\e[34mopen in $(basename "${browser}" '.exe')\e[0m"
	  ${browser} "${url}" &
	  break;
	done
      elif [ -e "${firefox_dev}" ]; then
	echo "\e[33monly found Firefox Deveploper Edition\e[0m"
	echo "\e[34mopen in Firefox Developer Edition\e[0m"
	"${firefox_dev}" "${url}" &
      elif [ -e "${firefox}" ]; then
	echo "\e[33monly found Firefox\e[0m"
	echo "\e[34mopen in Firefox\e[0m"
	"${firefox}" "${url}" &
      fi
      ;;
    Linux )
      ${$(whence firefox-developer):-firefox)} "${url}" &>/dev/null
      ;;
    * )
      echo "\e[31m[.zshrc]: un-recognized platform."
      ;;
  esac
} # }}}1

# hn(): hugo new and then open the new file in vim {{{1
hn() {

  if [[ $# -ne 1 ]]; then
    echo "usage: $0 <section>/../*.md"
    return
  fi

  hugo new "$1" -s . || return

  case $(uname -s) in
    Darwin )
      /Applications/MacVim.app/Contents/MacOS/Vim -g --remote-tab "content/$1"
      ;;
    CYGWIN* )
      gvopen "content/$1" # the function defined shell/cygwin/cygwin
      ;;
    Linux )
      gvim --remote-tab "content/$1"
      ;;
    * )
      echo "\e[31m[.zshrc]: un-recognized platform."
      ;;
  esac
} # }}}1

# vim: filetype=zsh
