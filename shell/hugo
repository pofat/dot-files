#!/usr/bin/env bash

# executable availability check
if [[ -z "$(whence hugo)" ]]; then
  printf "\e[31mmissing executable hugo..., quit\e[0m\n"
  return
fi

# hb(): build hugo site into mudox.github.io {{{1
hb() {

  local dest_path="${HOME}/Sites/mudox.github.io"

  if [ ! -d "${dest_path}" ]; then
    printf "\e[31mmissing ${dest_path} as destination repo, quit ...\e[0m\n"
    return
  fi

  local src_path="${HOME}/Sites/mudox.github.io-source"

  if [ ! -d "${src_path}" ]; then
    printf "\e[31mmissing ${src_path} as source repo, quit ...\e[0m\n"
    return
  fi

  local production_path="${src_path}/output/public"

  cd "${src_path}"

  # hugo building site
  printf "\e[34mstart building site ...\e[0m\n"
  rm -rf "${production_path}" &>/dev/null # remove public directory first.

  hugo                                 \
    --source=${src_path}               \
    --destination="${production_path}" \
    --buildDrafts                      \
    --buildFuture                      \
    --disableRSS=true                  \
    --disableSitemap=true              \
    --theme="cur_theme"

  # check hugo status
  if [ "$?" -ne 0 ]; then
    printf "\e[31mbuild site failed, quit ...\e[0m\n"
    return
  fi

  # installing to destiantion repo.
  printf "\e[34minstalling production ...\e[0m\n"
  rm -rf "${dest_path}"/* &>/dev/null # clean the directory up first
  cp -rT "${production_path}" "${dest_path}"

  if [[ "$?" -ne 0 ]]; then
    printf "\e[31mcopying failed..., quit\e[0m\n"
    return
  fi

  # commit & push changes to github
  cd "${dest_path}"
  if [ "$#" -ne 1 ]; then
    git add --all . && git commit
  else
    git add --all . && git commit -m "$1"
  fi

  # pushing up
  printf "\e[34mpushing up ...\e[0m\n"
  git push
} # }}}1

# hs(): hugo server for test {{{1
hs() {


  # kill running hugo if any.
  kill %hugo &>/dev/null


  # sleep a while for old hugo instance to die completely if any.
  if [[ "$?" -eq 0 ]]; then
    sleep .5s
    sleepc 1.5 .1 'waiting for old hugo instance to die out ...'
  fi

  # choose theme
  if [[ "$#" -le 1 ]]; then
    local theme=${1:-"cur_theme"}
  else
    echo "usage: $0 [theme_name]"
    return
  fi

  local src_path="${HOME}/Sites/mudox.github.io-source"

  if [ ! -d "${src_path}" ]; then
    printf "\e[31mmissing ${src_path} as source repo, quit ...\e[0m\n"
    return
  fi

  # start hugo server
  hugo server                         \
    --source="${src_path}"	      \
    --watch                           \
    --buildDrafts                     \
    --buildFuture                     \
    --theme="${theme}"                \
    --destination="output/local"      \
    >/tmp/hugo.log &

  sleepc 3 .1 'waiting for server to start ...'

  cat /tmp/hugo.log

  # parsing port number
  local port=$( cat /tmp/hugo.log | grep '^Web' | cut -c 45- )
  if [[ ! port =~ '[0-9]*' ]]; then
    printf "\e[31mparsing port number failed, got '${port}', quit ...\e[0m\n"
    return
  fi

  # open local pages in browser
  local url="http://localhost:${port}"

  case $(uname -s) in
    Darwin )
      open "${url}"
      ;;
    CYGWIN* )
      firefox='/d/Program Files/Mozilla Firefox/firefox.exe'
      if [ -e "${firefox}" ]; then
	"${firefox}" "${url}" &
      else
	printf "\e[31mmissing firefox, quit ...\e[0m\n"
	return
      fi
      ;;
    Linux )
      firefox "${url}" &>/dev/null &
      ;;
    * )
      printf "\e[31m[.zshrc]: un-recognized platform.\n"
      ;;
  esac
} # }}}1

# vim: filetype=zsh foldmethod=marker
