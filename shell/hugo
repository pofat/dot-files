#!/bin/bash

# hb(): build hugo site into mudox.github.io {{{1
hb() {
  local production='output/public'

  local site_git_path="${HOME}/Git/homepage"
  if [ ! -e "${site_git_path}" ]; then
    echo "\e[31mneed ${site_git_path}, quit ...\e[0m"
    return
  fi

  if [ ! -d "${site_git_path}" ]; then
    echo "\e[31mmissing ${site_git_path}, quit ...\e[0m"
    return
  fi

  # check if $(pwd) is a valid root of a hugo site.
  if ! [ -d "content" -a -f "config.toml" ]; then
    echo "\e[33mcurrent path is not a valid root of hugo site\e[0m"
    local default_site="${HOME}/Sites/hugo-site"
    if [ -d "${default_site}" ]; then
      echo "\e[34mcd to \e[7;34m${default_site} ...\e[0m"
      cd "${default_site}"
    else
      echo "\e[31mcan not find a valid hugo site path to cd, quit ...\e[0m"
      return
    fi
  fi

  # hugo building site
  echo "\e[34mstart building site ...\e[0m"
  # start hugo server
  hugo                            \
    --source=.                    \
    --destination="${production}" \
    --buildDrafts                 \
    --buildFuture                 \
    --disableRSS=true             \
    --disableSitemap=true         \
    --theme="cur_theme"

  # check hugo status
  if [ "$?" -ne 0 ]; then
    echo "\e[31mbuild site failed, quit ...\e[0m"
    return
  fi

  # installing to github local repo.
  echo "\e[34minstalling production ...\e[0m"
  rm -rf "${site_git_path}"/* &>/dev/null # clean the directory up first
  cp --recursive --target-directory="${site_git_path}" "./${production}"/* || return
  rm -rf "./${production}"

  # commit & push changes to github
  cd "${site_git_path}"
  if [ "$#" -ne 1 ]; then
    git add . && git commit
  else
    git add . && git commit -m "$1"
  fi

  # pushing up
  echo "\e[34mpushing up ...\e[0m"
  git push
} # }}}1

# hs(): hugo server for test {{{1
hs() {
  # kill running hugo if any.
  kill %hugo &>/dev/null


  # sleep a while for old hugo instance to die if any.
  if [[ "$?" -eq 0 ]]; then
    sleep .5s
    sleepc 1.5 .1 'waiting for old hugo instance to die out ...'
  fi

  # choose theme
  if [[ "$#" -le 1 ]]; then
    local theme=${1:-"cur_theme"}
  else
    echo "usage: $0 [theme_name]"
    return
  fi

  # check if $(pwd) is a valid root of a hugo site.
  if ! [ -d "content" -a -f "config.toml" ]; then
    echo "\e[33mcurrent path is not a valid root of hugo site\e[0m"
    local default_site="${HOME}/Sites/hugo-site"
    if [ -d "${default_site}" ]; then
      echo "\e[34mcd to \e[7;33m${default_site}\e[33m ...\e[0m"
      cd "${default_site}"
    else
      echo "\e[31mcan not find a valid hugo site path to cd\e[0m"
      return
    fi
  fi

  # start hugo server
  hugo server                         \
    --watch                           \
    --buildDrafts                     \
    --buildFuture                     \
    --theme="$theme"                  \
    --destination="output/local"      \
    --source=. >/tmp/hugo.log &

  sleepc 3 .1 'waiting for server to start ...'

  cat /tmp/hugo.log

  # parsing port number
  local port=$( cat /tmp/hugo.log | grep '^Web' | cut -c 45- )
  if [[ ! port =~ '[0-9]*' ]]; then
    echo "\e[31mparsing port number failed, got '${port}', quit ...\e[0m"
    return
  fi

  # open local pages in browser
  local url="http://localhost:${port}"

  case $(uname -s) in
    Darwin )
      open "${url}"
      ;;
    CYGWIN* )
      firefox='/d/Program Files/Mozilla Firefox/firefox.exe'
      if [ -e "${firefox}" ]; then
	"${firefox}" "${url}" &
      else
	echo "\e[31mmissing firefox, quit ...\e[0m"
	return
      fi
      ;;
    Linux )
      firefox "${url}" &>/dev/null &
      ;;
    * )
      echo "\e[31m[.zshrc]: un-recognized platform."
      ;;
  esac
} # }}}1

# hn(): hugo new and then open the new file in vim {{{1
hn() {

  if [[ $# -ne 1 ]]; then
    echo "usage: $0 <section>/../*.md"
    return
  fi

  hugo new "$1" -s . || return

  case $(uname -s) in
    Darwin )
      /Applications/MacVim.app/Contents/MacOS/Vim -g --remote-tab "content/$1"
      ;;
    CYGWIN* )
      gvopen "content/$1" # the function defined shell/cygwin/cygwin
      ;;
    Linux )
      gvim --remote-tab "content/$1"
      ;;
    * )
      echo "\e[31m[.zshrc]: un-recognized platform."
      ;;
  esac
} # }}}1

# vim: filetype=zsh foldmethod=marker
