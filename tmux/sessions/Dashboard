#!/usr/bin/env bash
set -euo pipefail

# client size
set +u
if [[ -n "$TMUX" ]]; then
  client_width="$(tmux list-clients -t '.' -F '#{client_width}')"
  client_height="$(tmux list-clients -t '.' -F '#{client_height}')"
else
  client_height=$(tput lines)
  client_width=$(tput cols)
fi
set -u


session_name='Dashboard'
if tmux has-session -t ${session_name} &>/dev/null; then
  echo "session [${session_name}] already exisits, kill it!"
  tmux kill-session -t "${session_name}"
fi


#
# window: Tasks
#

window_name='Tasks'
window="${session_name}:${window_name}"
tmux new-session        \
  -s "${session_name}"  \
  -n "${window_name}"   \
  -x "${client_width}"  \
  -y "${client_height}" \
  -d                    \
  htop

#
# window: Network
#

window_name='Network'
window="${session_name}:${window_name}"
tmux new-window -a -d        \
  -t "${session_name}:{end}" \
  -n "${window_name}"

## .1 run iftop
tmux send-keys -t "${window}.1" 'sudo iftop' c-m
tmux send-keys -t "${window}.1" 'ximeng' c-m

## .2 show clock and disable user input
#tmux split-window -t "${window}.1" -h -l 60
#tmux clock-mode -t "${window}.2"
#tmux select-pane -t "${window}.2" -d

## .3 run monitor script and disable user input
#tmux split-window -t "${window}.2" -v -l 28
#tmux send-keys -t "${window}.3" "
#cd "${HOME}/Develop/Python/vps-info"
#bash monitor.sh
#"

## disable pane .3
#tmux select-pane -t "${window}.3" -d

tmux select-window -t "${session_name}:1.1"
echo "[${session_name}]"
tmux list-window -t "${session_name}" -F ' - #W'
